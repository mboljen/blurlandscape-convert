#!/usr/bin/env bash
#
#  Created:        Mi 2022-12-07 21:58:05 CET
#  Last Modified:  Sa 2025-09-20 10:54:47 CEST
#
# blurlandscape-convert:
#   Add blur padding to convert portrait image to landscape

# Help text
usage() {
cat << EOF
Add blur padding to convert portrait image to landscape

Usage: blurlandscape-convert [OPTION]... INFILE...

Options:
  -m, --method=VALUE     Set virtual pixel method (dither|mirror|random)
  -d, --directory=VALUE  Set output directory (default: none)
  -n, --name=VALUE       Set output filename suffix (default: none)
  -y, --yes              Overwrite existing files
  -h, --help             Show this help message and exit
EOF
}

# Echo error messages on STDERR
echoerr () { cat <<< "$@" 1>&2; }

# Defaults
vpixel=dither
suffix=
dir=
yes=0

# Parse command line options
if ! args=$(getopt -a -o m:d:n:hy --long method:,directory:,name:,help,yes -- "$@")
then
    echoerr "Error processing command line options"
    usage
    exit 1
fi

# Process command line options
eval set -- "$args"
while :
do
    case $1 in
      -m | --method)     vpixel=$2 ; shift 2 ;;
      -n | --name)       suffix=$2 ; shift 2 ;;
      -d | --directory)  dir=$2    ; shift 2 ;;
      -y | --yes)        yes=1     ; shift   ;;
      -h | --help)       usage     ; shift   ; exit 0 ;;
      # -- means the end of the arguments; drop this, and break out of the while loop
      --) shift; break ;;
       *) echoerr "Unsupported option: $1"; usage ; shift; exit 1 ;;
    esac
done


# Check number of arguments
if [ "$#" -eq 0 ]
then
    echo "$0 requires at least 1 argument"
    usage
    exit 1
fi

# Check if NAME and DIR are both set
if [ -n "$suffix" ] && [ -n "$dir" ]
then
    echoerr "Options -d and -n are mutually exclusive"
    exit 1
fi

# Check if NAME and DIR are both empty
if [ -z "$suffix" ] && [ -z "$dir" ]
then
    suffix='blsc'
    echoerr "Using default output filename suffix: $suffix"
fi

# Set output directory if not defined
if [ -z "$dir" ]
then
    # Set current working directory as output directory
    dir=$(pwd)
else
    # Create output directory if not existing
    mkdir -p "$dir"
fi

# Loop over input files
while [ $# -gt 0 ]
do

    # Grep next argument
    srcfile=$1
    shift

    # Check if argument is valid file
    if [ ! -f "$srcfile" ]
    then
        echoerr "$srcfile is not a valid faile, skipped"
        continue
    fi

    # Get orientation
    orientation=$(identify -format '%[exif:orientation]' $srcfile)

    # Get height and width
    if (( orientation > 1 ))
    then
        # portrait
        w=$(identify -format "%h" $srcfile)
        h=$(identify -format "%w" $srcfile)
    else
        # landscape
        w=$(identify -format "%w" $srcfile)
        h=$(identify -format "%h" $srcfile)
    fi

    # Check dimensions
    if ! [[ $w =~ ^[0-9]+$ ]] || ! [[ $h =~ ^[0-9]+$ ]]
    then

        # Skip image if dimensions are not available
        echo "Cannot get size" >&2
        continue

    elif (( h > w ))
    then

        # Process portrait images only
        echo "Processing $srcfile ${w}x${h} ..."

        # Assemble name of output file
        tmp=$(basename -- "$srcfile")
        if [ -z "$suffix" ]
        then
            newfile="$dir/${tmp%.*}.${tmp##*.}"
        else
            newfile="$dir/${tmp%.*}-$suffix.${tmp##*.}"
        fi

        # Skip conversion if output file exists and no permission to overwrite
        if [ -f "$newfile" ]
        then
            if [ "$yes" -ne 0 ]
            then
                # Remove existing file
                rm "$newfile"
            else
                # Skip file
                echoerr "Outfile $newfile already exists, skipped"
                continue
            fi
        fi

        # Invoke Magick convert
        convert "$srcfile" -auto-orient \
             \( -clone 0 -virtual-pixel "$vpixel" \
                -set option:distort:viewport "%hx%w+%h+0" \
                -filter point -distort SRT 0 +repage -blur 0x5 \) \
             +swap -gravity center -resize "x${h}" -compose over -composite \
             -resize "${h}x" \
             "$newfile"

    fi

done
